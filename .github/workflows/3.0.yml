name: Test 3.0

on:
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Build tools
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake

      - name: Setup Python
        run: |
          sudo apt-get install -y python3 python3-pip python-is-python3
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      - name: Build TDengine
        run: |
          git clone --depth 1 https://github.com/taosdata/TDengine.git -b 3.0
          cd TDengine
          git submodule update --depth 1 --init --recursive
          mkdir build
          cd build
          cmake ../ -DBUILD_HTTP=false -DBUILD_JDBC=false -DCMAKE_INSTALL_PREFIX:PATH=`realpath ../../local/`
          make -j
          cd ../../

      - name: Start TDengine
        run: |
          tree TDengine/build/build/
          export C_INCLUDE_PATH=$PWD/TDengine/build/build/bin
          export LD_LIBRARY_PATH=$PWD/TDengine/build/build/lib
          mkdir -p /tmp/taos/
          printf "dataDir /tmp/taos\nlogDir /tmp/taos/\n" > /tmp/taos/taos.cfg
          ./TDengine/build/build/bin/taosd -c /tmp/taos/ &

      - name: Cache Poetry
        id: cache-poetry
        uses: actions/cache@v2.1.5
        with:
          path: ~/.poetry
          key: ubuntu-20.04-poetry
      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
      - name: Install library
        run: poetry install --no-interaction

      #----------------------------------------------
      #              run test suite
      #----------------------------------------------
      - name: Test
        run: |
          export LD_LIBRARY_PATH=$PWD/TDengine/build/build/lib
          source $VENV
          poetry run pip install psutil pandas
          poetry run pytest tests
      - name: Build Artifacts
        run: |
          poetry build
